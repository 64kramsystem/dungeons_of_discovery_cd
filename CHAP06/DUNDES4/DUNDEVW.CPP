// dundevw.cpp : implementation of the CDundesView class
//

#include "stdafx.h"
#include "dundes.h"

#include "dundedoc.h"
#include "dundevw.h"

#ifdef _DEBUG
#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// CDundesView

IMPLEMENT_DYNCREATE(CDundesView, CView)

BEGIN_MESSAGE_MAP(CDundesView, CView)
	//{{AFX_MSG_MAP(CDundesView)
	ON_COMMAND(ID_ITEMS_ARMOR, OnItemsArmor)
	ON_UPDATE_COMMAND_UI(ID_ITEMS_ARMOR, OnUpdateItemsArmor)
	ON_COMMAND(ID_ITEMS_DOOR, OnItemsDoor)
	ON_UPDATE_COMMAND_UI(ID_ITEMS_DOOR, OnUpdateItemsDoor)
	ON_COMMAND(ID_ITEMS_KEY, OnItemsKey)
	ON_UPDATE_COMMAND_UI(ID_ITEMS_KEY, OnUpdateItemsKey)
	ON_COMMAND(ID_ITEMS_MONSTER, OnItemsMonster)
	ON_UPDATE_COMMAND_UI(ID_ITEMS_MONSTER, OnUpdateItemsMonster)
	ON_COMMAND(ID_ITEMS_POTION, OnItemsPotion)
	ON_UPDATE_COMMAND_UI(ID_ITEMS_POTION, OnUpdateItemsPotion)
	ON_COMMAND(ID_ITEMS_SWORD, OnItemsSword)
	ON_UPDATE_COMMAND_UI(ID_ITEMS_SWORD, OnUpdateItemsSword)
	ON_COMMAND(ID_ITEMS_TREASURE, OnItemsTreasure)
	ON_UPDATE_COMMAND_UI(ID_ITEMS_TREASURE, OnUpdateItemsTreasure)
	ON_COMMAND(ID_ITEMS_WALL, OnItemsWall)
	ON_UPDATE_COMMAND_UI(ID_ITEMS_WALL, OnUpdateItemsWall)
	ON_WM_CREATE()
	//}}AFX_MSG_MAP
	// Standard printing commands
	ON_COMMAND(ID_FILE_PRINT, CView::OnFilePrint)
	ON_COMMAND(ID_FILE_PRINT_PREVIEW, CView::OnFilePrintPreview)
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CDundesView construction/destruction

CDundesView::CDundesView()
{
	// TODO: add construction code here

    ///////////////////////////////////////
    ///////////////////////////////////////
    // START CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////

    m_mode = Wall;

    ///////////////////////////////////////
    ///////////////////////////////////////
    // END CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////
}

CDundesView::~CDundesView()
{
    ///////////////////////////////////////
    ///////////////////////////////////////
    // START CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////

    delete m_pBitmap;

    ///////////////////////////////////////
    ///////////////////////////////////////
    // END CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////
}

/////////////////////////////////////////////////////////////////////////////
// CDundesView drawing

void CDundesView::OnDraw(CDC* pDC)
{
	CDundesDoc* pDoc = GetDocument();
	ASSERT_VALID(pDoc);

	// TODO: add draw code for native data here

    ///////////////////////////////////////
    ///////////////////////////////////////
    // START CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////

    // Create a memory DC that's compatible
    // with the paint DC.
    CDC memDC;
    memDC.CreateCompatibleDC(pDC);

    // Select the bitmap into the memory DC.
    memDC.SelectObject(m_pBitmap);

    // Blit the bitmap onto the screen.
    pDC->BitBlt(0, 0, 640, 480, &memDC, 0, 0, SRCCOPY);

    ///////////////////////////////////////
    ///////////////////////////////////////
    // END CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////

}

/////////////////////////////////////////////////////////////////////////////
// CDundesView printing

BOOL CDundesView::OnPreparePrinting(CPrintInfo* pInfo)
{
	// default preparation
	return DoPreparePrinting(pInfo);
}

void CDundesView::OnBeginPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/)
{
	// TODO: add extra initialization before printing
}

void CDundesView::OnEndPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/)
{
	// TODO: add cleanup after printing
}

/////////////////////////////////////////////////////////////////////////////
// CDundesView diagnostics

#ifdef _DEBUG
void CDundesView::AssertValid() const
{
	CView::AssertValid();
}

void CDundesView::Dump(CDumpContext& dc) const
{
	CView::Dump(dc);
}

CDundesDoc* CDundesView::GetDocument() // non-debug version is inline
{
	ASSERT(m_pDocument->IsKindOf(RUNTIME_CLASS(CDundesDoc)));
	return (CDundesDoc*)m_pDocument;
}
#endif //_DEBUG

/////////////////////////////////////////////////////////////////////////////
// CDundesView message handlers

void CDundesView::OnItemsArmor() 
{
	// TODO: Add your command handler code here
	
    ///////////////////////////////////////
    ///////////////////////////////////////
    // START CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////

    m_mode = Armor;

    ///////////////////////////////////////
    ///////////////////////////////////////
    // END CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////
}

void CDundesView::OnUpdateItemsArmor(CCmdUI* pCmdUI) 
{
	// TODO: Add your command update UI handler code here
	
    ///////////////////////////////////////
    ///////////////////////////////////////
    // START CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////

    if (m_mode == Armor)
        pCmdUI->SetCheck(TRUE);
    else
        pCmdUI->SetCheck(FALSE);

    ///////////////////////////////////////
    ///////////////////////////////////////
    // END CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////
}

void CDundesView::OnItemsDoor() 
{
	// TODO: Add your command handler code here
	
    ///////////////////////////////////////
    ///////////////////////////////////////
    // START CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////

    m_mode = Door;

    ///////////////////////////////////////
    ///////////////////////////////////////
    // END CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////
}

void CDundesView::OnUpdateItemsDoor(CCmdUI* pCmdUI) 
{
	// TODO: Add your command update UI handler code here
	
    ///////////////////////////////////////
    ///////////////////////////////////////
    // START CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////

    if (m_mode == Door)
        pCmdUI->SetCheck(TRUE);
    else
        pCmdUI->SetCheck(FALSE);

    ///////////////////////////////////////
    ///////////////////////////////////////
    // END CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////
}

void CDundesView::OnItemsKey() 
{
	// TODO: Add your command handler code here
	
    ///////////////////////////////////////
    ///////////////////////////////////////
    // START CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////

    m_mode = Key;

    ///////////////////////////////////////
    ///////////////////////////////////////
    // END CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////
}

void CDundesView::OnUpdateItemsKey(CCmdUI* pCmdUI) 
{
	// TODO: Add your command update UI handler code here
	
    ///////////////////////////////////////
    ///////////////////////////////////////
    // START CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////

    if (m_mode == Key)
        pCmdUI->SetCheck(TRUE);
    else
        pCmdUI->SetCheck(FALSE);

    ///////////////////////////////////////
    ///////////////////////////////////////
    // END CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////
}

void CDundesView::OnItemsMonster() 
{
	// TODO: Add your command handler code here
	
    ///////////////////////////////////////
    ///////////////////////////////////////
    // START CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////

    m_mode = Monster;

    ///////////////////////////////////////
    ///////////////////////////////////////
    // END CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////
}

void CDundesView::OnUpdateItemsMonster(CCmdUI* pCmdUI) 
{
	// TODO: Add your command update UI handler code here
	
    ///////////////////////////////////////
    ///////////////////////////////////////
    // START CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////

    if (m_mode == Monster)
        pCmdUI->SetCheck(TRUE);
    else
        pCmdUI->SetCheck(FALSE);

    ///////////////////////////////////////
    ///////////////////////////////////////
    // END CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////
}

void CDundesView::OnItemsPotion() 
{
	// TODO: Add your command handler code here
	
    ///////////////////////////////////////
    ///////////////////////////////////////
    // START CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////

    m_mode = Potion;

    ///////////////////////////////////////
    ///////////////////////////////////////
    // END CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////
}

void CDundesView::OnUpdateItemsPotion(CCmdUI* pCmdUI) 
{
	// TODO: Add your command update UI handler code here
	
    ///////////////////////////////////////
    ///////////////////////////////////////
    // START CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////

    if (m_mode == Potion)
        pCmdUI->SetCheck(TRUE);
    else
        pCmdUI->SetCheck(FALSE);

    ///////////////////////////////////////
    ///////////////////////////////////////
    // END CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////
}

void CDundesView::OnItemsSword() 
{
	// TODO: Add your command handler code here
	
    ///////////////////////////////////////
    ///////////////////////////////////////
    // START CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////

    m_mode = Sword;

    ///////////////////////////////////////
    ///////////////////////////////////////
    // END CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////
}

void CDundesView::OnUpdateItemsSword(CCmdUI* pCmdUI) 
{
	// TODO: Add your command update UI handler code here
	
    ///////////////////////////////////////
    ///////////////////////////////////////
    // START CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////

    if (m_mode == Sword)
        pCmdUI->SetCheck(TRUE);
    else
        pCmdUI->SetCheck(FALSE);

    ///////////////////////////////////////
    ///////////////////////////////////////
    // END CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////
}

void CDundesView::OnItemsTreasure() 
{
	// TODO: Add your command handler code here
	
    ///////////////////////////////////////
    ///////////////////////////////////////
    // START CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////

    m_mode = Treasure;

    ///////////////////////////////////////
    ///////////////////////////////////////
    // END CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////
}

void CDundesView::OnUpdateItemsTreasure(CCmdUI* pCmdUI) 
{
	// TODO: Add your command update UI handler code here
	
    ///////////////////////////////////////
    ///////////////////////////////////////
    // START CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////

    if (m_mode == Treasure)
        pCmdUI->SetCheck(TRUE);
    else
        pCmdUI->SetCheck(FALSE);

    ///////////////////////////////////////
    ///////////////////////////////////////
    // END CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////
}

void CDundesView::OnItemsWall() 
{
	// TODO: Add your command handler code here
	
    ///////////////////////////////////////
    ///////////////////////////////////////
    // START CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////

    m_mode = Wall;

    ///////////////////////////////////////
    ///////////////////////////////////////
    // END CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////
}

void CDundesView::OnUpdateItemsWall(CCmdUI* pCmdUI) 
{
	// TODO: Add your command update UI handler code here
	
    ///////////////////////////////////////
    ///////////////////////////////////////
    // START CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////

    if (m_mode == Wall)
        pCmdUI->SetCheck(TRUE);
    else
        pCmdUI->SetCheck(FALSE);

    ///////////////////////////////////////
    ///////////////////////////////////////
    // END CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////
}

int CDundesView::OnCreate(LPCREATESTRUCT lpCreateStruct) 
{
	if (CView::OnCreate(lpCreateStruct) == -1)
		return -1;
	
	// TODO: Add your specialized creation code here
	
    ///////////////////////////////////////
    ///////////////////////////////////////
    // START CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////

    // Get a device context for the window.	
    CClientDC clientDC(this);

    // Create a bitmap compatible with the window DC.
    m_pBitmap = new CBitmap;
    m_pBitmap->CreateCompatibleBitmap(&clientDC, 640, 480);

    // Create a memory DC compatible with the window DC.
    CDC memDC;
    memDC.CreateCompatibleDC(&clientDC);

    // Select the bitmap into the memory DC.
    memDC.SelectObject(m_pBitmap);

    // Clear the memory DC to white.
    CBrush* brush = new CBrush(RGB(255,255,255));
    memDC.FillRect(CRect(0, 0, 639, 479), brush);
    delete brush;

    // Draw the dungeon grid on the memory bitmap.
    DrawGrid(&memDC);

    ///////////////////////////////////////
    ///////////////////////////////////////
    // END CUSTOM CODE
    ///////////////////////////////////////
    ///////////////////////////////////////

	return 0;
}

///////////////////////////////////////
///////////////////////////////////////
// START CUSTOM CODE
///////////////////////////////////////
///////////////////////////////////////

void CDundesView::DrawGrid(CDC* dc)
{
    // Draw the grid's vertical lines.
    for (int x=0; x<=COLSIZE; ++x)
    {
        dc->MoveTo(SQUARESIZE*x+OFFSET, OFFSET);
        dc->LineTo(SQUARESIZE*x+OFFSET,
            SQUARESIZE*COLSIZE+OFFSET);
    }
    
    // Draw the grid's horizontal lines.
    for (int y=0; y<=ROWSIZE; ++y)
    {
        dc->MoveTo(OFFSET, SQUARESIZE*y+OFFSET);
        dc->LineTo(SQUARESIZE*ROWSIZE+OFFSET,
           SQUARESIZE*y+OFFSET);
    }
}

///////////////////////////////////////
///////////////////////////////////////
// END CUSTOM CODE
///////////////////////////////////////
///////////////////////////////////////

